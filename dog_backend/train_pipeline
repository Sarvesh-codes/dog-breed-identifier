import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image
from sklearn.model_selection import train_test_split
import mlflow

DATA_DIR = "training_data/"
LABELS = os.listdir(DATA_DIR)
IMG_SIZE = 224

def load_data():
    images, labels = [], []
    for label in LABELS:
        folder = os.path.join(DATA_DIR, label)
        for fname in os.listdir(folder):
            img = Image.open(os.path.join(folder, fname)).resize((IMG_SIZE, IMG_SIZE)).convert("RGB")
            images.append(np.array(img) / 255.0)
            labels.append(label)
    return np.array(images), np.array(labels)

def build_model():
    base = tf.keras.applications.MobileNetV2(include_top=False, input_shape=(224,224,3), pooling="avg")
    base.trainable = False
    x = tf.keras.layers.Dense(len(LABELS), activation="softmax")(base.output)
    return tf.keras.Model(inputs=base.input, outputs=x)

def train():
    X, y = load_data()
    y = tf.keras.utils.to_categorical([LABELS.index(lbl) for lbl in y], num_classes=len(LABELS))
    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)

    with mlflow.start_run():
        model = build_model()
        model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
        model.fit(X_train, y_train, epochs=5, validation_data=(X_val, y_val))

        acc = model.evaluate(X_val, y_val)[1]
        mlflow.log_metric("val_accuracy", acc)

        model.save("dog_breed_model.h5")
        mlflow.keras.log_model(model, "model")

if __name__ == "__main__":
    train()
